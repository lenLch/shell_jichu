shell脚本的本质
 编辑语言类型 编辑型；编译效率高 解释型：开发效率高
1.建立shell文件（文件以.sh 作为后缀 文件名原则上用字母数字下划线的组合，通常以字母开头有一定意义为好）
2.修改权限 将编辑的脚本添加可执行权限
3.执行 如果脚本由可执行权限 可以用./filename 直接执行
      如果没有执行权限 可以使用 bash filename 声明解释器执

变量value：是一个标识，用来储存具体的值
变量的使用和命名规则：需要是合法的标识符 1.数字字母下划线组成 2.不能以数字开头 3.不能和关键字重名（shell命令） 4.shell中区分大小写的

只有数字和字符串类型  shell是弱类型语言 注意点：1.变量赋值时等号两边不要有空格 2.可以用unset删除一个变量的赋值 3.在取变量值时用$
echo  直接加变量
echo -n  +变量 :打印完不换行
echo "" 原样引用
echo ‘’ 严格原样引用
位置变量：在执行脚本时，通过命令进行传入的参数就叫位置变量
$0 : 命令含命令所在的路径
$1 -9  表示1-9  9个位置的传入
${10}   第10个需要大括号
传入字符
$#   包含命令行参数的个数
$@   包含所有命令行参数
$*   包含所有命令行参数
$$   显示正在进程的id号
$?   如果上个语句正常执行显示0 当不正常执行时显示非0的数
\ 转义字符
环境变量
export PATH+="：路径"  添加环境变量
shell语句
注释：说明性语句 ： 以#开始到该行结束，不被解释执行
            用:<<!......!相当于多行注释
功能性语句 ：
            read ：从终端获取变量 一个read对应一个回车

/etc/init.d   系统的启动文件夹 rc rc.local rcS 文件启动
开机在家目录下创建新文件家     在rc.local最后一行加入

expr 运算关键字
乘需要加转义 \*
注意： 运算符两边要加空格
练习 计算 2*3 +15 -18/3 a=2 b= 3 c=15 d=18 从终端读入
let "a=2**3"  let 运算符 字符串的形式出现的 多种运算
+ - * / % += -+ /= *=
<< >>
^ 亦或 相同为0 不同为1
& 与 都是1为1 有一个0是0
~ 0变成1 1变成0 取反
| 或 有一个1 就为1
f++ 先赋值 后运算 ++f先运算 后赋值
f-- --------------------------
用let “k = (f++)”  或者 （（f++））
bc ：小数运算
位运算 let "a = 8 >> 2" 2  转化成二进制右移两位
      let ”a = 2 << 2  4  转化成二进制左移两位

测试：
test 语句 正确0 错误1
可以用【】要有空格前面不用加test
test 1 -eq 2  echo $? 输出上一条语句的对错 1
数字测试：
a -eq b 测试a和b是否相等
a -ne b 测试aheb是否不相等
a -gt b a是否大于b
a -ge b a是否大于等于b
a -lt b a是否小于b
a -le b a是否小于等于b

字符串的测试
等号两边要有空格
s1 = s2 测试两个字符串的内容是否完全一样
s1 != s2 测试两个字符串的内容是否有差异
-z s1 测试s1字符串的长度是否为0
-n s1 测试s1字符串的长度是否不为0

文件测试
-d name 测试name是否是一个目录
-e name 测试一个文件是否存在
-f name 测试name是否为普通文件
-c name 是否为管道
-L name 测试name是否为符号链接
-r name 测试name文件是否存在且为可读
-w name 测试name文件是否存在且为可写
-x name 测试name文件是否存在且为可执行
-s name 测试name文件是否存在且其长度不为0
f1 -nt f2 测试文件f1是否比文件f2更新
f1 -ot f2 测试文件f1是否比文件f2更旧

逻辑判断
&& -a 与 一假则假在一个【】 中用-a 【】&&【】
|| -o 或 一真则真在一个【】中用-o 【】||【】
！ 非 真变假 假变真 ！【 1 -eq 2 】


语句控制

if 语句
简单的if语句
if 表达式
then
命名表：包含一条或多条语句
fi

if的嵌套
if 条件语句
then
else

if
then
elif
then
fi

case ..  esac
case 字符变量 in
模式1）
 echo:
 ;;

循环语句：
for...do...done
for 变量名 in 单词表
	do
		命令表
	done

exit 0 正常退出
exit 1 异常退出

while循环
while 逻辑表达式
do
	命名表
done

until 循环
until []
do
done

break 可以加n

continue

select  终端控制的

for补充

shell函数

1.函数必须先定义 后使用
2.目的：为了代码的复用，是封装性的基本体现
3.在shell中 函数的定义和实现是在一起的
4.函数的三要素：功能 参数 返回值
5.在shell中也有 内建函数和自定义函数
方式1
function function_name () {
command1
.....     函数体
commandn
}


传参



返回值 用 `` 或者 $?

作用域 ：变量的作用范围
1.在函数里（局部作用域）：只有在作用范围内何以使用  关键字：local 变量名
2.在函数外（全局作用域）：可以在文件的任意地方使用
  当局部变量和全局变量重名时  在局部会默认使用局部变量

递归调用   调用自己本身的函数
注意：要有结束条件


alias 相当于给命令给一个小名

&& 列表 ：直到有一个为错的  就不在执行
|| 列表 ：直到有一个是对的 就不再执行下一个

set -e :打开错误调试
set +e ：关闭错误调试
set -x ：标出每一部执行的命令

数组：很多数组成的整体

数组的定义： 用 ()
数组取值
计算机原理

正则表达式：

规则：
grep -n ""
*  : 匹配0个或多个在*字符之前的那个普通字符 比如：hel*o  匹配0个或多个l
.  : 匹配任意一个字符
^  : 匹配行首
空行匹配 “^$”
匹配一行的内容 "^.....$"
$  : 匹配行尾
[] : 匹配字符集合 匹配其中的一个字符
[^...]  ：匹配...之外的
\  : 转移字符
\<...\> : 精确匹配
\{n\} : 匹配前面字符出现n次
\{n,\} : 匹配前面字符至少出现n次
\{n，m\} : 匹配前面字符出现n-m次

扩展的正则表达式匹配
awk perl

？ ： 匹配0个或1个之前的字符
+ ： 匹配1ge或多个之前的那个普通字符
（） ： 表示一个字符的集合
| ： 表示或

grep  -c  表示输出匹配字符串的数量
grep  -n  显示行号
grep  -v  显示撤了模式的其他
grep  -i  大小写不敏感
grep  -h 多个文件时不显示文件名
grep  -l 只显示匹配到的文件名 不显示匹配内容
grep  -r 在当前文件夹及子目录下进行查找
grep  -E 支持正则表达式
grep  -e 实现多个查询条件 -e.. -e..



sed 命名及sed编程
sed 是一个非交换式的文本编辑器
主要应用：
1.编辑相对交互文本编辑器而言太大的文件。
2.编辑命名太复杂，在交互式文本编译器中那一输入
3.对文件扫描一遍，但是需要执行多个编辑函数的情况。

运行3中情况
1.在 shell命令行输入sed命令
sed [选项] ‘sed命令’ 输入文件
选项
-n ： 不打印所有行的标准输出

-e ： 表示下一个字符串是sed的命令

-f ： 表示正在调用脚本文件

-f : 直接修改操作文件内容

替换文件内容 sed -i 's/n/m/g' * 把n替换成m

命令
1 要操作的范围
 使用行号或者正则表达式

 x 指定行号
 x，y 指定从x行到y行

 /行号/ 查询包含模式的行
 /行号/行号/

 /pattern/,x  从匹配行到x行
 x，/pattren/ 从x行到匹配行
2.将sed命令插入到脚本执行 ./sed
2 具体命令
p 打印匹配行
= 打印文件行号
a\ 在定位行之后追加文本信息

a=123
${a/123/456}   把一个123 换成456
${a//123/456}  把所有123都换成456
